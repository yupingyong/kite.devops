@inherits LayoutComponentBase

@using Kite.DevOps.Application.Contracts.Server
@using Kite.DevOps.Application.Contracts.Server.Dtos
@using Mapster
@using Kite.DevOps.Domain.Shared.Enums
@using Kite.DevOps.Blazor.Core;
@using Kite.DevOps.Application.Contracts.Administrator.Dtos;
@inject SwalService swalService
@inject NavigationManager navigationManager
@inject ToastService toastService
@inject IServerAppService serverAppService
@inject IServerGroupAppService serverGroupAppService

<Layout SideWidth="0" IsPage="true" ShowGotoTop="true" ShowCollapseBar="true"
        IsFullSide="true" IsFixedHeader="true" IsFixedFooter="true" ShowFooter="false"
        TabDefaultUrl="/"
        Menus="@MenuItems" UseTabSet="true" AdditionalAssemblies="new[] { GetType().Assembly }">
    <Header>
        <span class="ms-3 flex-sm-fill d-none d-sm-block">Kite DevOps 服务器管理控制台</span>
        <div class="flex-fill d-sm-none">
        </div>
        <Logout ImageUrl="images/kitelogo.png" DisplayName="@(Administrator.NickName)" UserName="@(Administrator.AdminName)">
            <LinkTemplate>
                <LogoutLink Url="/Logout" />
            </LinkTemplate>
        </Logout>
    </Header>
    <Side>
        <div class="layout-banner">
            <div class="layout-title">
                <span>控制台</span>
            </div>
        </div>
    </Side>
    <Main>
        <CascadingValue Value="this" IsFixed="true">
            @Body
        </CascadingValue>
    </Main>
    <Footer>
        <div class="text-center flex-fill">
        </div>
    </Footer>
    <NotFound>
        <p>Sorry, there's nothing at this address.</p>
    </NotFound>
</Layout>
@code {
    [Inject]
    private AuthorizationServerStorage ServerStorage { get; set; }
    /// <summary>
    ///
    /// </summary>
    private AdministratorDto Administrator { get; set; }

    private Tab? TabSetMenu { get; set; }
    private Menu? TabMenu { get; set; }

    private List<MenuItem> MenuItems { get; set; } = new List<MenuItem>();

    private List<ServerDto> Servers { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        //如果没有登录则跳转到登录页面
        if (ServerStorage.IsLogin())
        {
            Administrator = ServerStorage.GetServerStorage();
        }
        else
        {
            //
            Administrator = new AdministratorDto()
                {
                    AdminName = "未登录",
                    NickName = "未登录",
                    Id = Guid.Empty
                };
        }
        //默认添加控制台首页
        MenuItems.Add(new MenuItem()
            {
                Text = "首页",
                Icon = "fa fa-home",
                Url = "/Server/Console/Home",
                IsActive = true
            });
        var serverGroups = await serverGroupAppService.GetListAsync();
        var serverResult = await serverAppService.GetListAsync();
        if (serverResult.Code == 0)
        {
            Servers = serverResult.Data;
            foreach (var g in serverGroups.Data)
            {
                MenuItems.Add(
                   new MenuItem()
                    {
                        Text = g.GroupName,
                        Icon = "fa fa-desktop",
                        Id = "",
                        Items = Servers.Where(x => x.GroupId == g.Id)
                                            .Select(x => new MenuItem()
                                            {
                                                Text = x.ServerName,
                                                Icon = "fa fa-server",
                                                Url = $"/Server/Console/{x.Id}"
                                            })
                                            .ToList()
                    });
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Administrator.Id == Guid.Empty)
        {

            var op = new SwalOption()
                {
                    Category = SwalCategory.Warning,
                    Title = "你还未登录,请先登录",
                    ShowClose = false
                };
            op.ButtonTemplate = new RenderFragment(builder =>
            {
                builder.OpenComponent<Button>(0);
                builder.AddAttribute(1, nameof(Button.Text), "前往登录");
                builder.AddAttribute(2, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                {
                    navigationManager.NavigateTo("/Login");
                    op.Close();
                }));
                builder.CloseComponent();
            });
            await swalService.Show(op);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}