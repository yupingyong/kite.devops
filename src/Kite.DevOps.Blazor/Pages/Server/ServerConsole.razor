@page "/Server/Console"
@using Kite.DevOps.Application.Contracts.Server
@using Kite.DevOps.Application.Contracts.Server.Dtos
@using Mapster
@using Kite.DevOps.Domain.Shared.Enums
@inject ToastService toastService
@inject IServerAppService serverAppService
@inject IServerGroupAppService serverGroupAppService


<GroupBox Title="控制台" style="height:100%">
    <Split Basis="15%" class="border">
        <FirstPaneTemplate>
            <Menu Items="@MenuItems" IsVertical="true" OnClick="@OnClickMenuItem" @ref="TabMenu" />
        </FirstPaneTemplate>
        <SecondPaneTemplate>
            <Tab @ref="TabSetMenu" ShowClose="true">
            </Tab>
        </SecondPaneTemplate>
    </Split>
</GroupBox>


@code {

    private Tab? TabSetMenu { get; set; }
    private Menu? TabMenu { get; set; }

    private List<MenuItem> MenuItems { get; set; } = new List<MenuItem>();

    private List<ServerDto> Servers { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        var serverGroups = await serverGroupAppService.GetListAsync();
        var serverResult = await serverAppService.GetListAsync();
        if (serverResult.Code == 0)
        {
            Servers = serverResult.Data;
            foreach (var g in serverGroups.Data)
            {
                MenuItems.Add(new MenuItem()
                    {
                        Text = g.GroupName,
                        Icon = "fa fa-desktop",
                        Id = "",
                        Items = Servers.Where(x => x.GroupId == g.Id)
                                    .Select(x => new MenuItem()
                                    {
                                        Text = x.ServerName,
                                        Icon = "fa fa-server",
                                        Id = x.Id.ToString()
                                    })
                                    .ToList()
                    });
            }
        }
    }
    private Task OnClickMenuItem(MenuItem item)
    {
        if (!string.IsNullOrEmpty(item.Id) && item.Id != "")
        {
            item.IsActive = true;
            var text = item.Text;
            var tabItem = TabSetMenu.Items.FirstOrDefault(i => i.Text == text);
            if (tabItem == null)
            {
                AddTabItem(item);
            }
            else
            {
                TabSetMenu.ActiveTab(tabItem);
            }
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    private void AddTabItem(MenuItem item)
    {
        
        var server = Servers.Where(x => x.Id == Guid.Parse(item.Id));
        var pars = new Dictionary<string, object?>()
            {
                ["Server"] = server
            };
        TabSetMenu.AddTab(new Dictionary<string, object?>()
            {
                [nameof(TabItem.Text)] = item.Text,
                [nameof(TabItem.IsActive)] = true,
                [nameof(TabItem.ChildContent)] = BootstrapDynamicComponent.CreateComponent<ConsoleComponent>(pars).Render()
            });
    }
}
